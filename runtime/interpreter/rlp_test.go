/*
 * Cadence - The resource-oriented smart contract programming language
 *
 * Copyright 2019-2020 Dapper Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package interpreter_test

import (
	"fmt"
	"testing"

	"github.com/onflow/cadence/runtime/interpreter"
	"github.com/stretchr/testify/require"
)

func TestRLPReadStringItem(t *testing.T) {
	tests := []struct {
		inp     string
		encoded []byte
	}{
		{"A",
			[]byte{0x41},
		},
		{"dog",
			[]byte{0x83, 0x64, 0x6f, 0x67},
		},
		{"this is a test lo0o0o0o0o0ong string with 55 characters",
			[]byte{0xb7, // one byte size
				0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20,
				0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6c,
				0x6f, 0x30, 0x6f, 0x30, 0x6f, 0x30, 0x6f, 0x30,
				0x6f, 0x30, 0x6f, 0x6e, 0x67, 0x20, 0x73, 0x74,
				0x72, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74,
				0x68, 0x20, 0x35, 0x35, 0x20, 0x63, 0x68, 0x61,
				0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73},
		},
		{"this is a test lo0o0o0o0o0o0ng string with 56 characters",
			[]byte{0xb8, 0x38, // an extra byte for size
				0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20,
				0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6c,
				0x6f, 0x30, 0x6f, 0x30, 0x6f, 0x30, 0x6f, 0x30,
				0x6f, 0x30, 0x6f, 0x30, 0x6e, 0x67, 0x20, 0x73,
				0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69,
				0x74, 0x68, 0x20, 0x35, 0x36, 0x20, 0x63, 0x68,
				0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73},
		},
		{"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. " +
			"Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus" +
			" et magnis dis parturient montes, nascetur ridiculus mus.",
			[]byte{0xb8, 0xbf, // two byte sizes
				0x4c, 0x6f, 0x72, 0x65, 0x6d, 0x20, 0x69, 0x70, 0x73, 0x75,
				0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69,
				0x74, 0x20, 0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f,
				0x6e, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x65, 0x72,
				0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x69, 0x6e,
				0x67, 0x20, 0x65, 0x6c, 0x69, 0x74, 0x2e, 0x20, 0x41, 0x65,
				0x6e, 0x65, 0x61, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
				0x64, 0x6f, 0x20, 0x6c, 0x69, 0x67, 0x75, 0x6c, 0x61, 0x20,
				0x65, 0x67, 0x65, 0x74, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72,
				0x2e, 0x20, 0x41, 0x65, 0x6e, 0x65, 0x61, 0x6e, 0x20, 0x6d,
				0x61, 0x73, 0x73, 0x61, 0x2e, 0x20, 0x43, 0x75, 0x6d, 0x20,
				0x73, 0x6f, 0x63, 0x69, 0x69, 0x73, 0x20, 0x6e, 0x61, 0x74,
				0x6f, 0x71, 0x75, 0x65, 0x20, 0x70, 0x65, 0x6e, 0x61, 0x74,
				0x69, 0x62, 0x75, 0x73, 0x20, 0x65, 0x74, 0x20, 0x6d, 0x61,
				0x67, 0x6e, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x20, 0x70,
				0x61, 0x72, 0x74, 0x75, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x20,
				0x6d, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x2c, 0x20, 0x6e, 0x61,
				0x73, 0x63, 0x65, 0x74, 0x75, 0x72, 0x20, 0x72, 0x69, 0x64,
				0x69, 0x63, 0x75, 0x6c, 0x75, 0x73, 0x20, 0x6d, 0x75, 0x73,
				0x2e},
		},
		{"Lorem ipsum dolor sit amet, consectetur adipiscing elit. " +
			"Sed imperdiet odio a nibh rutrum blandit. Phasellus porta " +
			"eleifend tellus non consequat. Donec sodales velit in tortor " +
			"iaculis, sollicitudin dignissim orci maximus. Nunc at est sem. Sed congue proin.",
			[]byte{0xb9, 0x01, 0x00, // three bytes for size (256 chars) - checks big endian encoding
				0x4c, 0x6f, 0x72, 0x65, 0x6d, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6d,
				0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20,
				0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65,
				0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70,
				0x69, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6c, 0x69, 0x74,
				0x2e, 0x20, 0x53, 0x65, 0x64, 0x20, 0x69, 0x6d, 0x70, 0x65, 0x72,
				0x64, 0x69, 0x65, 0x74, 0x20, 0x6f, 0x64, 0x69, 0x6f, 0x20, 0x61,
				0x20, 0x6e, 0x69, 0x62, 0x68, 0x20, 0x72, 0x75, 0x74, 0x72, 0x75,
				0x6d, 0x20, 0x62, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x74, 0x2e, 0x20,
				0x50, 0x68, 0x61, 0x73, 0x65, 0x6c, 0x6c, 0x75, 0x73, 0x20, 0x70,
				0x6f, 0x72, 0x74, 0x61, 0x20, 0x65, 0x6c, 0x65, 0x69, 0x66, 0x65,
				0x6e, 0x64, 0x20, 0x74, 0x65, 0x6c, 0x6c, 0x75, 0x73, 0x20, 0x6e,
				0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x61,
				0x74, 0x2e, 0x20, 0x44, 0x6f, 0x6e, 0x65, 0x63, 0x20, 0x73, 0x6f,
				0x64, 0x61, 0x6c, 0x65, 0x73, 0x20, 0x76, 0x65, 0x6c, 0x69, 0x74,
				0x20, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x72, 0x74, 0x6f, 0x72, 0x20,
				0x69, 0x61, 0x63, 0x75, 0x6c, 0x69, 0x73, 0x2c, 0x20, 0x73, 0x6f,
				0x6c, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x75, 0x64, 0x69, 0x6e, 0x20,
				0x64, 0x69, 0x67, 0x6e, 0x69, 0x73, 0x73, 0x69, 0x6d, 0x20, 0x6f,
				0x72, 0x63, 0x69, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x73,
				0x2e, 0x20, 0x4e, 0x75, 0x6e, 0x63, 0x20, 0x61, 0x74, 0x20, 0x65,
				0x73, 0x74, 0x20, 0x73, 0x65, 0x6d, 0x2e, 0x20, 0x53, 0x65, 0x64,
				0x20, 0x63, 0x6f, 0x6e, 0x67, 0x75, 0x65, 0x20, 0x70, 0x72, 0x6f,
				0x69, 0x6e, 0x2e},
		},
	}

	for _, test := range tests {
		fmt.Println(">>>", len(test.inp))
		item, nextIndex, err := interpreter.RLPReadStringItem(test.encoded, 0)
		require.NoError(t, err)
		require.Equal(t, nextIndex, len(test.encoded))
		require.Equal(t, string(item), test.inp)

	}
}

func TestRLPReadListItem(t *testing.T) {

	// TODO convert this into a list of test cases
	// TODO invalid chars ?

	// TODO add a single item string

	tests := []struct {
		items   []interpreter.Item
		encoded []byte
	}{
		{
			[]interpreter.Item{interpreter.ByteItem('A')}, // single element
			[]byte{0xc1, 0x41},
		},
		{
			[]interpreter.Item{
				interpreter.StringItem("ABCDEFG"),
				interpreter.StringItem("HIJKLMN"),
			}, // two short string elements
			[]byte{0xd0, // number of elements in a short list
				0x87,                                     // size of string
				0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, // content
				0x87,                                     // size of string
				0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, // content
			},
		},
	}

	for _, test := range tests {
		item, nextIndex, err := interpreter.RLPReadListItem(test.encoded, 0)
		require.NoError(t, err)
		require.Equal(t, nextIndex, len(test.encoded))
		for i, expectedItem := range test.items {
			require.Equal(t, item.Get(i), expectedItem)
		}

	}
}

// TODO add nested tests

// C8 83 636174 83 646F67 [“cat”, “dog” ]
