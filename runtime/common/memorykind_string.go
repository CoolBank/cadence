// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBool-1]
	_ = x[MemoryKindAddress-2]
	_ = x[MemoryKindString-3]
	_ = x[MemoryKindCharacter-4]
	_ = x[MemoryKindMetaType-5]
	_ = x[MemoryKindNumber-6]
	_ = x[MemoryKindArrayBase-7]
	_ = x[MemoryKindDictionaryBase-8]
	_ = x[MemoryKindCompositeBase-9]
	_ = x[MemoryKindSimpleCompositeBase-10]
	_ = x[MemoryKindOptional-11]
	_ = x[MemoryKindNil-12]
	_ = x[MemoryKindVoid-13]
	_ = x[MemoryKindTypeValue-14]
	_ = x[MemoryKindPathValue-15]
	_ = x[MemoryKindCapabilityValue-16]
	_ = x[MemoryKindLinkValue-17]
	_ = x[MemoryKindStorageReferenceValue-18]
	_ = x[MemoryKindEphemeralReferenceValue-19]
	_ = x[MemoryKindInterpretedFunction-20]
	_ = x[MemoryKindHostFunction-21]
	_ = x[MemoryKindBoundFunction-22]
	_ = x[MemoryKindBigInt-23]
	_ = x[MemoryKindSimpleComposite-24]
	_ = x[MemoryKindAtreeArrayDataSlab-25]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-26]
	_ = x[MemoryKindAtreeMapDataSlab-27]
	_ = x[MemoryKindAtreeMapMetaDataSlab-28]
	_ = x[MemoryKindAtreeMapElementOverhead-29]
	_ = x[MemoryKindPrimitiveStaticType-30]
	_ = x[MemoryKindCompositeStaticType-31]
	_ = x[MemoryKindInterfaceStaticType-32]
	_ = x[MemoryKindVariableSizedStaticType-33]
	_ = x[MemoryKindConstantSizedStaticType-34]
	_ = x[MemoryKindDictionaryStaticType-35]
	_ = x[MemoryKindOptionalStaticType-36]
	_ = x[MemoryKindRestrictedStaticType-37]
	_ = x[MemoryKindReferenceStaticType-38]
	_ = x[MemoryKindCapabilityStaticType-39]
	_ = x[MemoryKindFunctionStaticType-40]
	_ = x[MemoryKindCadenceVoid-41]
	_ = x[MemoryKindCadenceOptional-42]
	_ = x[MemoryKindCadenceBool-43]
	_ = x[MemoryKindCadenceString-44]
	_ = x[MemoryKindCadenceCharacter-45]
	_ = x[MemoryKindCadenceAddress-46]
	_ = x[MemoryKindCadenceInt-47]
	_ = x[MemoryKindCadenceNumber-48]
	_ = x[MemoryKindCadenceArrayBase-49]
	_ = x[MemoryKindCadenceArrayLength-50]
	_ = x[MemoryKindCadenceDictionaryBase-51]
	_ = x[MemoryKindCadenceDictionarySize-52]
	_ = x[MemoryKindCadenceStructBase-53]
	_ = x[MemoryKindCadenceStructSize-54]
	_ = x[MemoryKindCadenceResourceBase-55]
	_ = x[MemoryKindCadenceResourceSize-56]
	_ = x[MemoryKindCadenceEventBase-57]
	_ = x[MemoryKindCadenceEventSize-58]
	_ = x[MemoryKindCadenceContractBase-59]
	_ = x[MemoryKindCadenceContractSize-60]
	_ = x[MemoryKindCadenceEnumBase-61]
	_ = x[MemoryKindCadenceEnumSize-62]
	_ = x[MemoryKindCadenceLink-63]
	_ = x[MemoryKindCadencePath-64]
	_ = x[MemoryKindCadenceTypeValue-65]
	_ = x[MemoryKindCadenceCapability-66]
	_ = x[MemoryKindRawString-67]
	_ = x[MemoryKindAddressLocation-68]
	_ = x[MemoryKindBytes-69]
	_ = x[MemoryKindVariable-70]
	_ = x[MemoryKindValueToken-71]
	_ = x[MemoryKindSyntaxToken-72]
	_ = x[MemoryKindSpaceToken-73]
	_ = x[MemoryKindProgram-74]
	_ = x[MemoryKindIdentifier-75]
	_ = x[MemoryKindArgument-76]
	_ = x[MemoryKindBlock-77]
	_ = x[MemoryKindFunctionBlock-78]
	_ = x[MemoryKindParameter-79]
	_ = x[MemoryKindParameterList-80]
	_ = x[MemoryKindTransfer-81]
	_ = x[MemoryKindMembers-82]
	_ = x[MemoryKindTypeAnnotation-83]
	_ = x[MemoryKindDictionaryEntry-84]
	_ = x[MemoryKindFunctionDeclaration-85]
	_ = x[MemoryKindCompositeDeclaration-86]
	_ = x[MemoryKindInterfaceDeclaration-87]
	_ = x[MemoryKindEnumCaseDeclaration-88]
	_ = x[MemoryKindFieldDeclaration-89]
	_ = x[MemoryKindTransactionDeclaration-90]
	_ = x[MemoryKindImportDeclaration-91]
	_ = x[MemoryKindVariableDeclaration-92]
	_ = x[MemoryKindSpecialFunctionDeclaration-93]
	_ = x[MemoryKindPragmaDeclaration-94]
	_ = x[MemoryKindAssignmentStatement-95]
	_ = x[MemoryKindBreakStatement-96]
	_ = x[MemoryKindContinueStatement-97]
	_ = x[MemoryKindEmitStatement-98]
	_ = x[MemoryKindExpressionStatement-99]
	_ = x[MemoryKindForStatement-100]
	_ = x[MemoryKindIfStatement-101]
	_ = x[MemoryKindReturnStatement-102]
	_ = x[MemoryKindSwapStatement-103]
	_ = x[MemoryKindSwitchStatement-104]
	_ = x[MemoryKindWhileStatement-105]
	_ = x[MemoryKindBooleanExpression-106]
	_ = x[MemoryKindNilExpression-107]
	_ = x[MemoryKindStringExpression-108]
	_ = x[MemoryKindIntegerExpression-109]
	_ = x[MemoryKindFixedPointExpression-110]
	_ = x[MemoryKindArrayExpression-111]
	_ = x[MemoryKindDictionaryExpression-112]
	_ = x[MemoryKindIdentifierExpression-113]
	_ = x[MemoryKindInvocationExpression-114]
	_ = x[MemoryKindMemberExpression-115]
	_ = x[MemoryKindIndexExpression-116]
	_ = x[MemoryKindConditionalExpression-117]
	_ = x[MemoryKindUnaryExpression-118]
	_ = x[MemoryKindBinaryExpression-119]
	_ = x[MemoryKindFunctionExpression-120]
	_ = x[MemoryKindCastingExpression-121]
	_ = x[MemoryKindCreateExpression-122]
	_ = x[MemoryKindDestroyExpression-123]
	_ = x[MemoryKindReferenceExpression-124]
	_ = x[MemoryKindForceExpression-125]
	_ = x[MemoryKindPathExpression-126]
	_ = x[MemoryKindConstantSizedType-127]
	_ = x[MemoryKindDictionaryType-128]
	_ = x[MemoryKindFunctionType-129]
	_ = x[MemoryKindInstantiationType-130]
	_ = x[MemoryKindNominalType-131]
	_ = x[MemoryKindOptionalType-132]
	_ = x[MemoryKindReferenceType-133]
	_ = x[MemoryKindRestrictedType-134]
	_ = x[MemoryKindVariableSizedType-135]
	_ = x[MemoryKindPosition-136]
	_ = x[MemoryKindRange-137]
	_ = x[MemoryKindElaboration-138]
	_ = x[MemoryKindLast-139]
}

const _MemoryKind_name = "UnknownBoolAddressStringCharacterMetaTypeNumberArrayBaseDictionaryBaseCompositeBaseSimpleCompositeBaseOptionalNilVoidTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionHostFunctionBoundFunctionBigIntSimpleCompositeAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidCadenceOptionalCadenceBoolCadenceStringCadenceCharacterCadenceAddressCadenceIntCadenceNumberCadenceArrayBaseCadenceArrayLengthCadenceDictionaryBaseCadenceDictionarySizeCadenceStructBaseCadenceStructSizeCadenceResourceBaseCadenceResourceSizeCadenceEventBaseCadenceEventSizeCadenceContractBaseCadenceContractSizeCadenceEnumBaseCadenceEnumSizeCadenceLinkCadencePathCadenceTypeValueCadenceCapabilityRawStringAddressLocationBytesVariableValueTokenSyntaxTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationLast"

var _MemoryKind_index = [...]uint16{0, 7, 11, 18, 24, 33, 41, 47, 56, 70, 83, 102, 110, 113, 117, 126, 135, 150, 159, 180, 203, 222, 234, 247, 253, 268, 286, 308, 324, 344, 367, 386, 405, 424, 447, 470, 490, 508, 528, 547, 567, 585, 596, 611, 622, 635, 651, 665, 675, 688, 704, 722, 743, 764, 781, 798, 817, 836, 852, 868, 887, 906, 921, 936, 947, 958, 974, 991, 1000, 1015, 1020, 1028, 1038, 1049, 1059, 1066, 1076, 1084, 1089, 1102, 1111, 1124, 1132, 1139, 1153, 1168, 1187, 1207, 1227, 1246, 1262, 1284, 1301, 1320, 1346, 1363, 1382, 1396, 1413, 1426, 1445, 1457, 1468, 1483, 1496, 1511, 1525, 1542, 1555, 1571, 1588, 1608, 1623, 1643, 1663, 1683, 1699, 1714, 1735, 1750, 1766, 1784, 1801, 1817, 1834, 1853, 1868, 1882, 1899, 1913, 1925, 1942, 1953, 1965, 1978, 1992, 2009, 2017, 2022, 2033, 2037}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
