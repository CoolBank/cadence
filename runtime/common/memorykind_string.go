// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBool-1]
	_ = x[MemoryKindAddress-2]
	_ = x[MemoryKindString-3]
	_ = x[MemoryKindCharacter-4]
	_ = x[MemoryKindMetaType-5]
	_ = x[MemoryKindNumber-6]
	_ = x[MemoryKindArrayBase-7]
	_ = x[MemoryKindDictionaryBase-8]
	_ = x[MemoryKindCompositeBase-9]
	_ = x[MemoryKindSimpleCompositeBase-10]
	_ = x[MemoryKindOptional-11]
	_ = x[MemoryKindNil-12]
	_ = x[MemoryKindVoid-13]
	_ = x[MemoryKindTypeValue-14]
	_ = x[MemoryKindPathValue-15]
	_ = x[MemoryKindCapabilityValue-16]
	_ = x[MemoryKindLinkValue-17]
	_ = x[MemoryKindStorageReferenceValue-18]
	_ = x[MemoryKindEphemeralReferenceValue-19]
	_ = x[MemoryKindInterpretedFunction-20]
	_ = x[MemoryKindHostFunction-21]
	_ = x[MemoryKindBoundFunction-22]
	_ = x[MemoryKindBigInt-23]
	_ = x[MemoryKindSimpleComposite-24]
	_ = x[MemoryKindAtreeArrayDataSlab-25]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-26]
	_ = x[MemoryKindAtreeMapDataSlab-27]
	_ = x[MemoryKindAtreeMapMetaDataSlab-28]
	_ = x[MemoryKindAtreeMapElementOverhead-29]
	_ = x[MemoryKindPrimitiveStaticType-30]
	_ = x[MemoryKindCompositeStaticType-31]
	_ = x[MemoryKindInterfaceStaticType-32]
	_ = x[MemoryKindVariableSizedStaticType-33]
	_ = x[MemoryKindConstantSizedStaticType-34]
	_ = x[MemoryKindDictionaryStaticType-35]
	_ = x[MemoryKindOptionalStaticType-36]
	_ = x[MemoryKindRestrictedStaticType-37]
	_ = x[MemoryKindReferenceStaticType-38]
	_ = x[MemoryKindCapabilityStaticType-39]
	_ = x[MemoryKindFunctionStaticType-40]
	_ = x[MemoryKindCadenceVoid-41]
	_ = x[MemoryKindCadenceOptional-42]
	_ = x[MemoryKindCadenceBool-43]
	_ = x[MemoryKindCadenceString-44]
	_ = x[MemoryKindRawString-45]
	_ = x[MemoryKindAddressLocation-46]
	_ = x[MemoryKindBytes-47]
	_ = x[MemoryKindVariable-48]
	_ = x[MemoryKindValueToken-49]
	_ = x[MemoryKindSyntaxToken-50]
	_ = x[MemoryKindSpaceToken-51]
	_ = x[MemoryKindProgram-52]
	_ = x[MemoryKindIdentifier-53]
	_ = x[MemoryKindArgument-54]
	_ = x[MemoryKindBlock-55]
	_ = x[MemoryKindFunctionBlock-56]
	_ = x[MemoryKindParameter-57]
	_ = x[MemoryKindParameterList-58]
	_ = x[MemoryKindTransfer-59]
	_ = x[MemoryKindMembers-60]
	_ = x[MemoryKindTypeAnnotation-61]
	_ = x[MemoryKindDictionaryEntry-62]
	_ = x[MemoryKindFunctionDeclaration-63]
	_ = x[MemoryKindCompositeDeclaration-64]
	_ = x[MemoryKindInterfaceDeclaration-65]
	_ = x[MemoryKindEnumCaseDeclaration-66]
	_ = x[MemoryKindFieldDeclaration-67]
	_ = x[MemoryKindTransactionDeclaration-68]
	_ = x[MemoryKindImportDeclaration-69]
	_ = x[MemoryKindVariableDeclaration-70]
	_ = x[MemoryKindSpecialFunctionDeclaration-71]
	_ = x[MemoryKindPragmaDeclaration-72]
	_ = x[MemoryKindAssignmentStatement-73]
	_ = x[MemoryKindBreakStatement-74]
	_ = x[MemoryKindContinueStatement-75]
	_ = x[MemoryKindEmitStatement-76]
	_ = x[MemoryKindExpressionStatement-77]
	_ = x[MemoryKindForStatement-78]
	_ = x[MemoryKindIfStatement-79]
	_ = x[MemoryKindReturnStatement-80]
	_ = x[MemoryKindSwapStatement-81]
	_ = x[MemoryKindSwitchStatement-82]
	_ = x[MemoryKindWhileStatement-83]
	_ = x[MemoryKindBooleanExpression-84]
	_ = x[MemoryKindNilExpression-85]
	_ = x[MemoryKindStringExpression-86]
	_ = x[MemoryKindIntegerExpression-87]
	_ = x[MemoryKindFixedPointExpression-88]
	_ = x[MemoryKindArrayExpression-89]
	_ = x[MemoryKindDictionaryExpression-90]
	_ = x[MemoryKindIdentifierExpression-91]
	_ = x[MemoryKindInvocationExpression-92]
	_ = x[MemoryKindMemberExpression-93]
	_ = x[MemoryKindIndexExpression-94]
	_ = x[MemoryKindConditionalExpression-95]
	_ = x[MemoryKindUnaryExpression-96]
	_ = x[MemoryKindBinaryExpression-97]
	_ = x[MemoryKindFunctionExpression-98]
	_ = x[MemoryKindCastingExpression-99]
	_ = x[MemoryKindCreateExpression-100]
	_ = x[MemoryKindDestroyExpression-101]
	_ = x[MemoryKindReferenceExpression-102]
	_ = x[MemoryKindForceExpression-103]
	_ = x[MemoryKindPathExpression-104]
	_ = x[MemoryKindConstantSizedType-105]
	_ = x[MemoryKindDictionaryType-106]
	_ = x[MemoryKindFunctionType-107]
	_ = x[MemoryKindInstantiationType-108]
	_ = x[MemoryKindNominalType-109]
	_ = x[MemoryKindOptionalType-110]
	_ = x[MemoryKindReferenceType-111]
	_ = x[MemoryKindRestrictedType-112]
	_ = x[MemoryKindVariableSizedType-113]
	_ = x[MemoryKindPosition-114]
	_ = x[MemoryKindRange-115]
	_ = x[MemoryKindElaboration-116]
	_ = x[MemoryKindLast-117]
}

const _MemoryKind_name = "UnknownBoolAddressStringCharacterMetaTypeNumberArrayBaseDictionaryBaseCompositeBaseSimpleCompositeBaseOptionalNilVoidTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionHostFunctionBoundFunctionBigIntSimpleCompositeAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidCadenceOptionalCadenceBoolCadenceStringRawStringAddressLocationBytesVariableValueTokenSyntaxTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationLast"

var _MemoryKind_index = [...]uint16{0, 7, 11, 18, 24, 33, 41, 47, 56, 70, 83, 102, 110, 113, 117, 126, 135, 150, 159, 180, 203, 222, 234, 247, 253, 268, 286, 308, 324, 344, 367, 386, 405, 424, 447, 470, 490, 508, 528, 547, 567, 585, 596, 611, 622, 635, 644, 659, 664, 672, 682, 693, 703, 710, 720, 728, 733, 746, 755, 768, 776, 783, 797, 812, 831, 851, 871, 890, 906, 928, 945, 964, 990, 1007, 1026, 1040, 1057, 1070, 1089, 1101, 1112, 1127, 1140, 1155, 1169, 1186, 1199, 1215, 1232, 1252, 1267, 1287, 1307, 1327, 1343, 1358, 1379, 1394, 1410, 1428, 1445, 1461, 1478, 1497, 1512, 1526, 1543, 1557, 1569, 1586, 1597, 1609, 1622, 1636, 1653, 1661, 1666, 1677, 1681}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
