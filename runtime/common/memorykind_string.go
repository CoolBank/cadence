// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBool-1]
	_ = x[MemoryKindAddress-2]
	_ = x[MemoryKindString-3]
	_ = x[MemoryKindCharacter-4]
	_ = x[MemoryKindMetaType-5]
	_ = x[MemoryKindNumber-6]
	_ = x[MemoryKindArrayBase-7]
	_ = x[MemoryKindDictionaryBase-8]
	_ = x[MemoryKindCompositeBase-9]
	_ = x[MemoryKindSimpleCompositeBase-10]
	_ = x[MemoryKindOptional-11]
	_ = x[MemoryKindNil-12]
	_ = x[MemoryKindVoid-13]
	_ = x[MemoryKindTypeValue-14]
	_ = x[MemoryKindPathValue-15]
	_ = x[MemoryKindCapabilityValue-16]
	_ = x[MemoryKindLinkValue-17]
	_ = x[MemoryKindStorageReferenceValue-18]
	_ = x[MemoryKindEphemeralReferenceValue-19]
	_ = x[MemoryKindInterpretedFunction-20]
	_ = x[MemoryKindHostFunction-21]
	_ = x[MemoryKindBoundFunction-22]
	_ = x[MemoryKindBigInt-23]
	_ = x[MemoryKindSimpleComposite-24]
	_ = x[MemoryKindAtreeArrayDataSlab-25]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-26]
	_ = x[MemoryKindAtreeMapDataSlab-27]
	_ = x[MemoryKindAtreeMapMetaDataSlab-28]
	_ = x[MemoryKindAtreeMapElementOverhead-29]
	_ = x[MemoryKindPrimitiveStaticType-30]
	_ = x[MemoryKindCompositeStaticType-31]
	_ = x[MemoryKindInterfaceStaticType-32]
	_ = x[MemoryKindVariableSizedStaticType-33]
	_ = x[MemoryKindConstantSizedStaticType-34]
	_ = x[MemoryKindDictionaryStaticType-35]
	_ = x[MemoryKindOptionalStaticType-36]
	_ = x[MemoryKindRestrictedStaticType-37]
	_ = x[MemoryKindReferenceStaticType-38]
	_ = x[MemoryKindCapabilityStaticType-39]
	_ = x[MemoryKindFunctionStaticType-40]
	_ = x[MemoryKindCadenceVoid-41]
	_ = x[MemoryKindCadenceOptional-42]
	_ = x[MemoryKindCadenceBool-43]
	_ = x[MemoryKindCadenceString-44]
	_ = x[MemoryKindCadenceCharacter-45]
	_ = x[MemoryKindCadenceAddress-46]
	_ = x[MemoryKindCadenceInt-47]
	_ = x[MemoryKindCadenceNumber-48]
	_ = x[MemoryKindCadenceArrayBase-49]
	_ = x[MemoryKindCadenceArrayLength-50]
	_ = x[MemoryKindCadenceDictionaryBase-51]
	_ = x[MemoryKindCadenceDictionarySize-52]
	_ = x[MemoryKindCadenceKeyValuePair-53]
	_ = x[MemoryKindCadenceStructBase-54]
	_ = x[MemoryKindCadenceStructSize-55]
	_ = x[MemoryKindCadenceResourceBase-56]
	_ = x[MemoryKindCadenceResourceSize-57]
	_ = x[MemoryKindCadenceEventBase-58]
	_ = x[MemoryKindCadenceEventSize-59]
	_ = x[MemoryKindCadenceContractBase-60]
	_ = x[MemoryKindCadenceContractSize-61]
	_ = x[MemoryKindCadenceEnumBase-62]
	_ = x[MemoryKindCadenceEnumSize-63]
	_ = x[MemoryKindCadenceLink-64]
	_ = x[MemoryKindCadencePath-65]
	_ = x[MemoryKindCadenceTypeValue-66]
	_ = x[MemoryKindCadenceCapability-67]
	_ = x[MemoryKindCadenceSimpleType-68]
	_ = x[MemoryKindCadenceOptionalType-69]
	_ = x[MemoryKindCadenceVariableSizedArrayType-70]
	_ = x[MemoryKindCadenceConstantSizedArrayType-71]
	_ = x[MemoryKindCadenceDictionaryType-72]
	_ = x[MemoryKindCadenceField-73]
	_ = x[MemoryKindCadenceParameter-74]
	_ = x[MemoryKindCadenceStructType-75]
	_ = x[MemoryKindCadenceResourceType-76]
	_ = x[MemoryKindCadenceEventType-77]
	_ = x[MemoryKindCadenceContractType-78]
	_ = x[MemoryKindCadenceStructInterfaceType-79]
	_ = x[MemoryKindCadenceResourceInterfaceType-80]
	_ = x[MemoryKindCadenceContractInterfaceType-81]
	_ = x[MemoryKindCadenceFunctionType-82]
	_ = x[MemoryKindCadenceReferenceType-83]
	_ = x[MemoryKindCadenceRestrictedType-84]
	_ = x[MemoryKindCadenceCapabilityType-85]
	_ = x[MemoryKindCadenceEnumType-86]
	_ = x[MemoryKindRawString-87]
	_ = x[MemoryKindAddressLocation-88]
	_ = x[MemoryKindBytes-89]
	_ = x[MemoryKindVariable-90]
	_ = x[MemoryKindValueToken-91]
	_ = x[MemoryKindSyntaxToken-92]
	_ = x[MemoryKindSpaceToken-93]
	_ = x[MemoryKindProgram-94]
	_ = x[MemoryKindIdentifier-95]
	_ = x[MemoryKindArgument-96]
	_ = x[MemoryKindBlock-97]
	_ = x[MemoryKindFunctionBlock-98]
	_ = x[MemoryKindParameter-99]
	_ = x[MemoryKindParameterList-100]
	_ = x[MemoryKindTransfer-101]
	_ = x[MemoryKindMembers-102]
	_ = x[MemoryKindTypeAnnotation-103]
	_ = x[MemoryKindDictionaryEntry-104]
	_ = x[MemoryKindFunctionDeclaration-105]
	_ = x[MemoryKindCompositeDeclaration-106]
	_ = x[MemoryKindInterfaceDeclaration-107]
	_ = x[MemoryKindEnumCaseDeclaration-108]
	_ = x[MemoryKindFieldDeclaration-109]
	_ = x[MemoryKindTransactionDeclaration-110]
	_ = x[MemoryKindImportDeclaration-111]
	_ = x[MemoryKindVariableDeclaration-112]
	_ = x[MemoryKindSpecialFunctionDeclaration-113]
	_ = x[MemoryKindPragmaDeclaration-114]
	_ = x[MemoryKindAssignmentStatement-115]
	_ = x[MemoryKindBreakStatement-116]
	_ = x[MemoryKindContinueStatement-117]
	_ = x[MemoryKindEmitStatement-118]
	_ = x[MemoryKindExpressionStatement-119]
	_ = x[MemoryKindForStatement-120]
	_ = x[MemoryKindIfStatement-121]
	_ = x[MemoryKindReturnStatement-122]
	_ = x[MemoryKindSwapStatement-123]
	_ = x[MemoryKindSwitchStatement-124]
	_ = x[MemoryKindWhileStatement-125]
	_ = x[MemoryKindBooleanExpression-126]
	_ = x[MemoryKindNilExpression-127]
	_ = x[MemoryKindStringExpression-128]
	_ = x[MemoryKindIntegerExpression-129]
	_ = x[MemoryKindFixedPointExpression-130]
	_ = x[MemoryKindArrayExpression-131]
	_ = x[MemoryKindDictionaryExpression-132]
	_ = x[MemoryKindIdentifierExpression-133]
	_ = x[MemoryKindInvocationExpression-134]
	_ = x[MemoryKindMemberExpression-135]
	_ = x[MemoryKindIndexExpression-136]
	_ = x[MemoryKindConditionalExpression-137]
	_ = x[MemoryKindUnaryExpression-138]
	_ = x[MemoryKindBinaryExpression-139]
	_ = x[MemoryKindFunctionExpression-140]
	_ = x[MemoryKindCastingExpression-141]
	_ = x[MemoryKindCreateExpression-142]
	_ = x[MemoryKindDestroyExpression-143]
	_ = x[MemoryKindReferenceExpression-144]
	_ = x[MemoryKindForceExpression-145]
	_ = x[MemoryKindPathExpression-146]
	_ = x[MemoryKindConstantSizedType-147]
	_ = x[MemoryKindDictionaryType-148]
	_ = x[MemoryKindFunctionType-149]
	_ = x[MemoryKindInstantiationType-150]
	_ = x[MemoryKindNominalType-151]
	_ = x[MemoryKindOptionalType-152]
	_ = x[MemoryKindReferenceType-153]
	_ = x[MemoryKindRestrictedType-154]
	_ = x[MemoryKindVariableSizedType-155]
	_ = x[MemoryKindPosition-156]
	_ = x[MemoryKindRange-157]
	_ = x[MemoryKindElaboration-158]
	_ = x[MemoryKindLast-159]
}

const _MemoryKind_name = "UnknownBoolAddressStringCharacterMetaTypeNumberArrayBaseDictionaryBaseCompositeBaseSimpleCompositeBaseOptionalNilVoidTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionHostFunctionBoundFunctionBigIntSimpleCompositeAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidCadenceOptionalCadenceBoolCadenceStringCadenceCharacterCadenceAddressCadenceIntCadenceNumberCadenceArrayBaseCadenceArrayLengthCadenceDictionaryBaseCadenceDictionarySizeCadenceKeyValuePairCadenceStructBaseCadenceStructSizeCadenceResourceBaseCadenceResourceSizeCadenceEventBaseCadenceEventSizeCadenceContractBaseCadenceContractSizeCadenceEnumBaseCadenceEnumSizeCadenceLinkCadencePathCadenceTypeValueCadenceCapabilityCadenceSimpleTypeCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableValueTokenSyntaxTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationLast"

var _MemoryKind_index = [...]uint16{0, 7, 11, 18, 24, 33, 41, 47, 56, 70, 83, 102, 110, 113, 117, 126, 135, 150, 159, 180, 203, 222, 234, 247, 253, 268, 286, 308, 324, 344, 367, 386, 405, 424, 447, 470, 490, 508, 528, 547, 567, 585, 596, 611, 622, 635, 651, 665, 675, 688, 704, 722, 743, 764, 783, 800, 817, 836, 855, 871, 887, 906, 925, 940, 955, 966, 977, 993, 1010, 1027, 1046, 1075, 1104, 1125, 1137, 1153, 1170, 1189, 1205, 1224, 1250, 1278, 1306, 1325, 1345, 1366, 1387, 1402, 1411, 1426, 1431, 1439, 1449, 1460, 1470, 1477, 1487, 1495, 1500, 1513, 1522, 1535, 1543, 1550, 1564, 1579, 1598, 1618, 1638, 1657, 1673, 1695, 1712, 1731, 1757, 1774, 1793, 1807, 1824, 1837, 1856, 1868, 1879, 1894, 1907, 1922, 1936, 1953, 1966, 1982, 1999, 2019, 2034, 2054, 2074, 2094, 2110, 2125, 2146, 2161, 2177, 2195, 2212, 2228, 2245, 2264, 2279, 2293, 2310, 2324, 2336, 2353, 2364, 2376, 2389, 2403, 2420, 2428, 2433, 2444, 2448}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
