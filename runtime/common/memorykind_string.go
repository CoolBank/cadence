// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBool-1]
	_ = x[MemoryKindAddress-2]
	_ = x[MemoryKindString-3]
	_ = x[MemoryKindCharacter-4]
	_ = x[MemoryKindMetaType-5]
	_ = x[MemoryKindNumber-6]
	_ = x[MemoryKindArray-7]
	_ = x[MemoryKindDictionary-8]
	_ = x[MemoryKindComposite-9]
	_ = x[MemoryKindOptional-10]
	_ = x[MemoryKindNil-11]
	_ = x[MemoryKindVoid-12]
	_ = x[MemoryKindTypeValue-13]
	_ = x[MemoryKindPathValue-14]
	_ = x[MemoryKindCapabilityValue-15]
	_ = x[MemoryKindLinkValue-16]
	_ = x[MemoryKindStorageReferenceValue-17]
	_ = x[MemoryKindEphemeralReferenceValue-18]
	_ = x[MemoryKindInterpretedFunction-19]
	_ = x[MemoryKindHostFunction-20]
	_ = x[MemoryKindBoundFunction-21]
	_ = x[MemoryKindBigInt-22]
	_ = x[MemoryKindPrimitiveStaticType-23]
	_ = x[MemoryKindCompositeStaticType-24]
	_ = x[MemoryKindInterfaceStaticType-25]
	_ = x[MemoryKindVariableSizedStaticType-26]
	_ = x[MemoryKindConstantSizedStaticType-27]
	_ = x[MemoryKindDictionaryStaticType-28]
	_ = x[MemoryKindOptionalStaticType-29]
	_ = x[MemoryKindRestrictedStaticType-30]
	_ = x[MemoryKindReferenceStaticType-31]
	_ = x[MemoryKindCapabilityStaticType-32]
	_ = x[MemoryKindFunctionStaticType-33]
	_ = x[MemoryKindRawString-34]
	_ = x[MemoryKindAddressLocation-35]
	_ = x[MemoryKindBytes-36]
	_ = x[MemoryKindVariable-37]
	_ = x[MemoryKindTokenIdentifier-38]
	_ = x[MemoryKindTokenComment-39]
	_ = x[MemoryKindTokenNumericLiteral-40]
	_ = x[MemoryKindTokenSyntax-41]
	_ = x[MemoryKindProgram-42]
	_ = x[MemoryKindIdentifier-43]
	_ = x[MemoryKindArgument-44]
	_ = x[MemoryKindBlock-45]
	_ = x[MemoryKindFunctionBlock-46]
	_ = x[MemoryKindParameter-47]
	_ = x[MemoryKindParameterList-48]
	_ = x[MemoryKindTransfer-49]
	_ = x[MemoryKindMembers-50]
	_ = x[MemoryKindTypeAnnotation-51]
	_ = x[MemoryKindFunctionDeclaration-52]
	_ = x[MemoryKindCompositeDeclaration-53]
	_ = x[MemoryKindInterfaceDeclaration-54]
	_ = x[MemoryKindEnumCaseDeclaration-55]
	_ = x[MemoryKindFieldDeclaration-56]
	_ = x[MemoryKindTransactionDeclaration-57]
	_ = x[MemoryKindImportDeclaration-58]
	_ = x[MemoryKindVariableDeclaration-59]
	_ = x[MemoryKindSpecialFunctionDeclaration-60]
	_ = x[MemoryKindPragmaDeclaration-61]
	_ = x[MemoryKindAssignmentStatement-62]
	_ = x[MemoryKindBreakStatement-63]
	_ = x[MemoryKindContinueStatement-64]
	_ = x[MemoryKindEmitStatement-65]
	_ = x[MemoryKindExpressionStatement-66]
	_ = x[MemoryKindForStatement-67]
	_ = x[MemoryKindIfStatement-68]
	_ = x[MemoryKindReturnStatement-69]
	_ = x[MemoryKindSwapStatement-70]
	_ = x[MemoryKindSwitchStatement-71]
	_ = x[MemoryKindWhileStatement-72]
	_ = x[MemoryKindBooleanExpression-73]
	_ = x[MemoryKindNilExpression-74]
	_ = x[MemoryKindStringExpression-75]
	_ = x[MemoryKindIntegerExpression-76]
	_ = x[MemoryKindFixedPointExpression-77]
	_ = x[MemoryKindArrayExpression-78]
	_ = x[MemoryKindDictionaryExpression-79]
	_ = x[MemoryKindIdentifierExpression-80]
	_ = x[MemoryKindInvocationExpression-81]
	_ = x[MemoryKindMemberExpression-82]
	_ = x[MemoryKindIndexExpression-83]
	_ = x[MemoryKindConditionalExpression-84]
	_ = x[MemoryKindUnaryExpression-85]
	_ = x[MemoryKindBinaryExpression-86]
	_ = x[MemoryKindFunctionExpression-87]
	_ = x[MemoryKindCastingExpression-88]
	_ = x[MemoryKindCreateExpression-89]
	_ = x[MemoryKindDestroyExpression-90]
	_ = x[MemoryKindReferenceExpression-91]
	_ = x[MemoryKindForceExpression-92]
	_ = x[MemoryKindPathExpression-93]
	_ = x[MemoryKindConstantSizedType-94]
	_ = x[MemoryKindDictionaryType-95]
	_ = x[MemoryKindFunctionType-96]
	_ = x[MemoryKindInstantiationType-97]
	_ = x[MemoryKindNominalType-98]
	_ = x[MemoryKindOptionalType-99]
	_ = x[MemoryKindReferenceType-100]
	_ = x[MemoryKindRestrictedType-101]
	_ = x[MemoryKindVariableSizedType-102]
	_ = x[MemoryKindLast-103]
}

const _MemoryKind_name = "UnknownBoolAddressStringCharacterMetaTypeNumberArrayDictionaryCompositeOptionalNilVoidTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionHostFunctionBoundFunctionBigIntPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeRawStringAddressLocationBytesVariableTokenIdentifierTokenCommentTokenNumericLiteralTokenSyntaxProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypeLast"

var _MemoryKind_index = [...]uint16{0, 7, 11, 18, 24, 33, 41, 47, 52, 62, 71, 79, 82, 86, 95, 104, 119, 128, 149, 172, 191, 203, 216, 222, 241, 260, 279, 302, 325, 345, 363, 383, 402, 422, 440, 449, 464, 469, 477, 492, 504, 523, 534, 541, 551, 559, 564, 577, 586, 599, 607, 614, 628, 647, 667, 687, 706, 722, 744, 761, 780, 806, 823, 842, 856, 873, 886, 905, 917, 928, 943, 956, 971, 985, 1002, 1015, 1031, 1048, 1068, 1083, 1103, 1123, 1143, 1159, 1174, 1195, 1210, 1226, 1244, 1261, 1277, 1294, 1313, 1328, 1342, 1359, 1373, 1385, 1402, 1413, 1425, 1438, 1452, 1469, 1473}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
