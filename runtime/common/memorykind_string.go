// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBool-1]
	_ = x[MemoryKindAddress-2]
	_ = x[MemoryKindString-3]
	_ = x[MemoryKindCharacter-4]
	_ = x[MemoryKindMetaType-5]
	_ = x[MemoryKindNumber-6]
	_ = x[MemoryKindArrayBase-7]
	_ = x[MemoryKindDictionaryBase-8]
	_ = x[MemoryKindCompositeBase-9]
	_ = x[MemoryKindSimpleCompositeBase-10]
	_ = x[MemoryKindOptional-11]
	_ = x[MemoryKindNil-12]
	_ = x[MemoryKindVoid-13]
	_ = x[MemoryKindTypeValue-14]
	_ = x[MemoryKindPathValue-15]
	_ = x[MemoryKindCapabilityValue-16]
	_ = x[MemoryKindLinkValue-17]
	_ = x[MemoryKindStorageReferenceValue-18]
	_ = x[MemoryKindEphemeralReferenceValue-19]
	_ = x[MemoryKindInterpretedFunction-20]
	_ = x[MemoryKindHostFunction-21]
	_ = x[MemoryKindBoundFunction-22]
	_ = x[MemoryKindBigInt-23]
	_ = x[MemoryKindSimpleComposite-24]
	_ = x[MemoryKindAtreeArrayDataSlab-25]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-26]
	_ = x[MemoryKindAtreeMapDataSlab-27]
	_ = x[MemoryKindAtreeMapMetaDataSlab-28]
	_ = x[MemoryKindAtreeMapElementOverhead-29]
	_ = x[MemoryKindPrimitiveStaticType-30]
	_ = x[MemoryKindCompositeStaticType-31]
	_ = x[MemoryKindInterfaceStaticType-32]
	_ = x[MemoryKindVariableSizedStaticType-33]
	_ = x[MemoryKindConstantSizedStaticType-34]
	_ = x[MemoryKindDictionaryStaticType-35]
	_ = x[MemoryKindOptionalStaticType-36]
	_ = x[MemoryKindRestrictedStaticType-37]
	_ = x[MemoryKindReferenceStaticType-38]
	_ = x[MemoryKindCapabilityStaticType-39]
	_ = x[MemoryKindFunctionStaticType-40]
	_ = x[MemoryKindCadenceVoid-41]
	_ = x[MemoryKindCadenceOptional-42]
	_ = x[MemoryKindCadenceBool-43]
	_ = x[MemoryKindCadenceString-44]
	_ = x[MemoryKindCadenceCharacter-45]
	_ = x[MemoryKindCadenceAddress-46]
	_ = x[MemoryKindCadenceInt-47]
	_ = x[MemoryKindCadenceNumber-48]
	_ = x[MemoryKindRawString-49]
	_ = x[MemoryKindAddressLocation-50]
	_ = x[MemoryKindBytes-51]
	_ = x[MemoryKindVariable-52]
	_ = x[MemoryKindValueToken-53]
	_ = x[MemoryKindSyntaxToken-54]
	_ = x[MemoryKindSpaceToken-55]
	_ = x[MemoryKindProgram-56]
	_ = x[MemoryKindIdentifier-57]
	_ = x[MemoryKindArgument-58]
	_ = x[MemoryKindBlock-59]
	_ = x[MemoryKindFunctionBlock-60]
	_ = x[MemoryKindParameter-61]
	_ = x[MemoryKindParameterList-62]
	_ = x[MemoryKindTransfer-63]
	_ = x[MemoryKindMembers-64]
	_ = x[MemoryKindTypeAnnotation-65]
	_ = x[MemoryKindDictionaryEntry-66]
	_ = x[MemoryKindFunctionDeclaration-67]
	_ = x[MemoryKindCompositeDeclaration-68]
	_ = x[MemoryKindInterfaceDeclaration-69]
	_ = x[MemoryKindEnumCaseDeclaration-70]
	_ = x[MemoryKindFieldDeclaration-71]
	_ = x[MemoryKindTransactionDeclaration-72]
	_ = x[MemoryKindImportDeclaration-73]
	_ = x[MemoryKindVariableDeclaration-74]
	_ = x[MemoryKindSpecialFunctionDeclaration-75]
	_ = x[MemoryKindPragmaDeclaration-76]
	_ = x[MemoryKindAssignmentStatement-77]
	_ = x[MemoryKindBreakStatement-78]
	_ = x[MemoryKindContinueStatement-79]
	_ = x[MemoryKindEmitStatement-80]
	_ = x[MemoryKindExpressionStatement-81]
	_ = x[MemoryKindForStatement-82]
	_ = x[MemoryKindIfStatement-83]
	_ = x[MemoryKindReturnStatement-84]
	_ = x[MemoryKindSwapStatement-85]
	_ = x[MemoryKindSwitchStatement-86]
	_ = x[MemoryKindWhileStatement-87]
	_ = x[MemoryKindBooleanExpression-88]
	_ = x[MemoryKindNilExpression-89]
	_ = x[MemoryKindStringExpression-90]
	_ = x[MemoryKindIntegerExpression-91]
	_ = x[MemoryKindFixedPointExpression-92]
	_ = x[MemoryKindArrayExpression-93]
	_ = x[MemoryKindDictionaryExpression-94]
	_ = x[MemoryKindIdentifierExpression-95]
	_ = x[MemoryKindInvocationExpression-96]
	_ = x[MemoryKindMemberExpression-97]
	_ = x[MemoryKindIndexExpression-98]
	_ = x[MemoryKindConditionalExpression-99]
	_ = x[MemoryKindUnaryExpression-100]
	_ = x[MemoryKindBinaryExpression-101]
	_ = x[MemoryKindFunctionExpression-102]
	_ = x[MemoryKindCastingExpression-103]
	_ = x[MemoryKindCreateExpression-104]
	_ = x[MemoryKindDestroyExpression-105]
	_ = x[MemoryKindReferenceExpression-106]
	_ = x[MemoryKindForceExpression-107]
	_ = x[MemoryKindPathExpression-108]
	_ = x[MemoryKindConstantSizedType-109]
	_ = x[MemoryKindDictionaryType-110]
	_ = x[MemoryKindFunctionType-111]
	_ = x[MemoryKindInstantiationType-112]
	_ = x[MemoryKindNominalType-113]
	_ = x[MemoryKindOptionalType-114]
	_ = x[MemoryKindReferenceType-115]
	_ = x[MemoryKindRestrictedType-116]
	_ = x[MemoryKindVariableSizedType-117]
	_ = x[MemoryKindPosition-118]
	_ = x[MemoryKindRange-119]
	_ = x[MemoryKindElaboration-120]
	_ = x[MemoryKindLast-121]
}

const _MemoryKind_name = "UnknownBoolAddressStringCharacterMetaTypeNumberArrayBaseDictionaryBaseCompositeBaseSimpleCompositeBaseOptionalNilVoidTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionHostFunctionBoundFunctionBigIntSimpleCompositeAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidCadenceOptionalCadenceBoolCadenceStringCadenceCharacterCadenceAddressCadenceIntCadenceNumberRawStringAddressLocationBytesVariableValueTokenSyntaxTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationLast"

var _MemoryKind_index = [...]uint16{0, 7, 11, 18, 24, 33, 41, 47, 56, 70, 83, 102, 110, 113, 117, 126, 135, 150, 159, 180, 203, 222, 234, 247, 253, 268, 286, 308, 324, 344, 367, 386, 405, 424, 447, 470, 490, 508, 528, 547, 567, 585, 596, 611, 622, 635, 651, 665, 675, 688, 697, 712, 717, 725, 735, 746, 756, 763, 773, 781, 786, 799, 808, 821, 829, 836, 850, 865, 884, 904, 924, 943, 959, 981, 998, 1017, 1043, 1060, 1079, 1093, 1110, 1123, 1142, 1154, 1165, 1180, 1193, 1208, 1222, 1239, 1252, 1268, 1285, 1305, 1320, 1340, 1360, 1380, 1396, 1411, 1432, 1447, 1463, 1481, 1498, 1514, 1531, 1550, 1565, 1579, 1596, 1610, 1622, 1639, 1650, 1662, 1675, 1689, 1706, 1714, 1719, 1730, 1734}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
