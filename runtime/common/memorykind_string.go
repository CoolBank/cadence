// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBool-1]
	_ = x[MemoryKindAddress-2]
	_ = x[MemoryKindString-3]
	_ = x[MemoryKindCharacter-4]
	_ = x[MemoryKindMetaType-5]
	_ = x[MemoryKindNumber-6]
	_ = x[MemoryKindArrayBase-7]
	_ = x[MemoryKindDictionaryBase-8]
	_ = x[MemoryKindCompositeBase-9]
	_ = x[MemoryKindSimpleCompositeBase-10]
	_ = x[MemoryKindOptional-11]
	_ = x[MemoryKindNil-12]
	_ = x[MemoryKindVoid-13]
	_ = x[MemoryKindTypeValue-14]
	_ = x[MemoryKindPathValue-15]
	_ = x[MemoryKindCapabilityValue-16]
	_ = x[MemoryKindLinkValue-17]
	_ = x[MemoryKindStorageReferenceValue-18]
	_ = x[MemoryKindEphemeralReferenceValue-19]
	_ = x[MemoryKindInterpretedFunction-20]
	_ = x[MemoryKindHostFunction-21]
	_ = x[MemoryKindBoundFunction-22]
	_ = x[MemoryKindBigInt-23]
	_ = x[MemoryKindSimpleComposite-24]
	_ = x[MemoryKindAtreeArrayDataSlab-25]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-26]
	_ = x[MemoryKindAtreeArrayElementOverhead-27]
	_ = x[MemoryKindAtreeMapDataSlab-28]
	_ = x[MemoryKindAtreeMapMetaDataSlab-29]
	_ = x[MemoryKindAtreeMapElementOverhead-30]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-31]
	_ = x[MemoryKindPrimitiveStaticType-32]
	_ = x[MemoryKindCompositeStaticType-33]
	_ = x[MemoryKindInterfaceStaticType-34]
	_ = x[MemoryKindVariableSizedStaticType-35]
	_ = x[MemoryKindConstantSizedStaticType-36]
	_ = x[MemoryKindDictionaryStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindRestrictedStaticType-39]
	_ = x[MemoryKindReferenceStaticType-40]
	_ = x[MemoryKindCapabilityStaticType-41]
	_ = x[MemoryKindFunctionStaticType-42]
	_ = x[MemoryKindCadenceVoid-43]
	_ = x[MemoryKindCadenceOptional-44]
	_ = x[MemoryKindCadenceBool-45]
	_ = x[MemoryKindCadenceString-46]
	_ = x[MemoryKindCadenceCharacter-47]
	_ = x[MemoryKindCadenceAddress-48]
	_ = x[MemoryKindCadenceInt-49]
	_ = x[MemoryKindCadenceNumber-50]
	_ = x[MemoryKindCadenceArrayBase-51]
	_ = x[MemoryKindCadenceArrayLength-52]
	_ = x[MemoryKindCadenceDictionaryBase-53]
	_ = x[MemoryKindCadenceDictionarySize-54]
	_ = x[MemoryKindCadenceKeyValuePair-55]
	_ = x[MemoryKindCadenceStructBase-56]
	_ = x[MemoryKindCadenceStructSize-57]
	_ = x[MemoryKindCadenceResourceBase-58]
	_ = x[MemoryKindCadenceResourceSize-59]
	_ = x[MemoryKindCadenceEventBase-60]
	_ = x[MemoryKindCadenceEventSize-61]
	_ = x[MemoryKindCadenceContractBase-62]
	_ = x[MemoryKindCadenceContractSize-63]
	_ = x[MemoryKindCadenceEnumBase-64]
	_ = x[MemoryKindCadenceEnumSize-65]
	_ = x[MemoryKindCadenceLink-66]
	_ = x[MemoryKindCadencePath-67]
	_ = x[MemoryKindCadenceTypeValue-68]
	_ = x[MemoryKindCadenceCapability-69]
	_ = x[MemoryKindCadenceSimpleType-70]
	_ = x[MemoryKindCadenceOptionalType-71]
	_ = x[MemoryKindCadenceVariableSizedArrayType-72]
	_ = x[MemoryKindCadenceConstantSizedArrayType-73]
	_ = x[MemoryKindCadenceDictionaryType-74]
	_ = x[MemoryKindCadenceField-75]
	_ = x[MemoryKindCadenceParameter-76]
	_ = x[MemoryKindCadenceStructType-77]
	_ = x[MemoryKindCadenceResourceType-78]
	_ = x[MemoryKindCadenceEventType-79]
	_ = x[MemoryKindCadenceContractType-80]
	_ = x[MemoryKindCadenceStructInterfaceType-81]
	_ = x[MemoryKindCadenceResourceInterfaceType-82]
	_ = x[MemoryKindCadenceContractInterfaceType-83]
	_ = x[MemoryKindCadenceFunctionType-84]
	_ = x[MemoryKindCadenceReferenceType-85]
	_ = x[MemoryKindCadenceRestrictedType-86]
	_ = x[MemoryKindCadenceCapabilityType-87]
	_ = x[MemoryKindCadenceEnumType-88]
	_ = x[MemoryKindRawString-89]
	_ = x[MemoryKindAddressLocation-90]
	_ = x[MemoryKindBytes-91]
	_ = x[MemoryKindVariable-92]
	_ = x[MemoryKindValueToken-93]
	_ = x[MemoryKindSyntaxToken-94]
	_ = x[MemoryKindSpaceToken-95]
	_ = x[MemoryKindProgram-96]
	_ = x[MemoryKindIdentifier-97]
	_ = x[MemoryKindArgument-98]
	_ = x[MemoryKindBlock-99]
	_ = x[MemoryKindFunctionBlock-100]
	_ = x[MemoryKindParameter-101]
	_ = x[MemoryKindParameterList-102]
	_ = x[MemoryKindTransfer-103]
	_ = x[MemoryKindMembers-104]
	_ = x[MemoryKindTypeAnnotation-105]
	_ = x[MemoryKindDictionaryEntry-106]
	_ = x[MemoryKindFunctionDeclaration-107]
	_ = x[MemoryKindCompositeDeclaration-108]
	_ = x[MemoryKindInterfaceDeclaration-109]
	_ = x[MemoryKindEnumCaseDeclaration-110]
	_ = x[MemoryKindFieldDeclaration-111]
	_ = x[MemoryKindTransactionDeclaration-112]
	_ = x[MemoryKindImportDeclaration-113]
	_ = x[MemoryKindVariableDeclaration-114]
	_ = x[MemoryKindSpecialFunctionDeclaration-115]
	_ = x[MemoryKindPragmaDeclaration-116]
	_ = x[MemoryKindAssignmentStatement-117]
	_ = x[MemoryKindBreakStatement-118]
	_ = x[MemoryKindContinueStatement-119]
	_ = x[MemoryKindEmitStatement-120]
	_ = x[MemoryKindExpressionStatement-121]
	_ = x[MemoryKindForStatement-122]
	_ = x[MemoryKindIfStatement-123]
	_ = x[MemoryKindReturnStatement-124]
	_ = x[MemoryKindSwapStatement-125]
	_ = x[MemoryKindSwitchStatement-126]
	_ = x[MemoryKindWhileStatement-127]
	_ = x[MemoryKindBooleanExpression-128]
	_ = x[MemoryKindNilExpression-129]
	_ = x[MemoryKindStringExpression-130]
	_ = x[MemoryKindIntegerExpression-131]
	_ = x[MemoryKindFixedPointExpression-132]
	_ = x[MemoryKindArrayExpression-133]
	_ = x[MemoryKindDictionaryExpression-134]
	_ = x[MemoryKindIdentifierExpression-135]
	_ = x[MemoryKindInvocationExpression-136]
	_ = x[MemoryKindMemberExpression-137]
	_ = x[MemoryKindIndexExpression-138]
	_ = x[MemoryKindConditionalExpression-139]
	_ = x[MemoryKindUnaryExpression-140]
	_ = x[MemoryKindBinaryExpression-141]
	_ = x[MemoryKindFunctionExpression-142]
	_ = x[MemoryKindCastingExpression-143]
	_ = x[MemoryKindCreateExpression-144]
	_ = x[MemoryKindDestroyExpression-145]
	_ = x[MemoryKindReferenceExpression-146]
	_ = x[MemoryKindForceExpression-147]
	_ = x[MemoryKindPathExpression-148]
	_ = x[MemoryKindConstantSizedType-149]
	_ = x[MemoryKindDictionaryType-150]
	_ = x[MemoryKindFunctionType-151]
	_ = x[MemoryKindInstantiationType-152]
	_ = x[MemoryKindNominalType-153]
	_ = x[MemoryKindOptionalType-154]
	_ = x[MemoryKindReferenceType-155]
	_ = x[MemoryKindRestrictedType-156]
	_ = x[MemoryKindVariableSizedType-157]
	_ = x[MemoryKindPosition-158]
	_ = x[MemoryKindRange-159]
	_ = x[MemoryKindElaboration-160]
	_ = x[MemoryKindActivation-161]
	_ = x[MemoryKindActivationEntries-162]
	_ = x[MemoryKindLast-163]
}

const _MemoryKind_name = "UnknownBoolAddressStringCharacterMetaTypeNumberArrayBaseDictionaryBaseCompositeBaseSimpleCompositeBaseOptionalNilVoidTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionHostFunctionBoundFunctionBigIntSimpleCompositeAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidCadenceOptionalCadenceBoolCadenceStringCadenceCharacterCadenceAddressCadenceIntCadenceNumberCadenceArrayBaseCadenceArrayLengthCadenceDictionaryBaseCadenceDictionarySizeCadenceKeyValuePairCadenceStructBaseCadenceStructSizeCadenceResourceBaseCadenceResourceSizeCadenceEventBaseCadenceEventSizeCadenceContractBaseCadenceContractSizeCadenceEnumBaseCadenceEnumSizeCadenceLinkCadencePathCadenceTypeValueCadenceCapabilityCadenceSimpleTypeCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableValueTokenSyntaxTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesLast"

var _MemoryKind_index = [...]uint16{0, 7, 11, 18, 24, 33, 41, 47, 56, 70, 83, 102, 110, 113, 117, 126, 135, 150, 159, 180, 203, 222, 234, 247, 253, 268, 286, 308, 333, 349, 369, 392, 419, 438, 457, 476, 499, 522, 542, 560, 580, 599, 619, 637, 648, 663, 674, 687, 703, 717, 727, 740, 756, 774, 795, 816, 835, 852, 869, 888, 907, 923, 939, 958, 977, 992, 1007, 1018, 1029, 1045, 1062, 1079, 1098, 1127, 1156, 1177, 1189, 1205, 1222, 1241, 1257, 1276, 1302, 1330, 1358, 1377, 1397, 1418, 1439, 1454, 1463, 1478, 1483, 1491, 1501, 1512, 1522, 1529, 1539, 1547, 1552, 1565, 1574, 1587, 1595, 1602, 1616, 1631, 1650, 1670, 1690, 1709, 1725, 1747, 1764, 1783, 1809, 1826, 1845, 1859, 1876, 1889, 1908, 1920, 1931, 1946, 1959, 1974, 1988, 2005, 2018, 2034, 2051, 2071, 2086, 2106, 2126, 2146, 2162, 2177, 2198, 2213, 2229, 2247, 2264, 2280, 2297, 2316, 2331, 2345, 2362, 2376, 2388, 2405, 2416, 2428, 2441, 2455, 2472, 2480, 2485, 2496, 2506, 2523, 2527}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
