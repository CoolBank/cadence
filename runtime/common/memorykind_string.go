// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBool-1]
	_ = x[MemoryKindAddress-2]
	_ = x[MemoryKindString-3]
	_ = x[MemoryKindCharacter-4]
	_ = x[MemoryKindMetaType-5]
	_ = x[MemoryKindNumber-6]
	_ = x[MemoryKindArray-7]
	_ = x[MemoryKindDictionary-8]
	_ = x[MemoryKindComposite-9]
	_ = x[MemoryKindOptional-10]
	_ = x[MemoryKindNil-11]
	_ = x[MemoryKindVoid-12]
	_ = x[MemoryKindTypeValue-13]
	_ = x[MemoryKindPathValue-14]
	_ = x[MemoryKindCapabilityValue-15]
	_ = x[MemoryKindLinkValue-16]
	_ = x[MemoryKindStorageReferenceValue-17]
	_ = x[MemoryKindEphemeralReferenceValue-18]
	_ = x[MemoryKindInterpretedFunction-19]
	_ = x[MemoryKindHostFunction-20]
	_ = x[MemoryKindBoundFunction-21]
	_ = x[MemoryKindBigInt-22]
	_ = x[MemoryKindPrimitiveStaticType-23]
	_ = x[MemoryKindOptionalStaticType-24]
	_ = x[MemoryKindVariableSizedStaticType-25]
	_ = x[MemoryKindConstantSizedStaticType-26]
	_ = x[MemoryKindDictionaryStaticType-27]
	_ = x[MemoryKindCompositeStaticType-28]
	_ = x[MemoryKindInterfaceStaticType-29]
	_ = x[MemoryKindReferenceStaticType-30]
	_ = x[MemoryKindRestrictedStaticType-31]
	_ = x[MemoryKindCapabilityStaticType-32]
	_ = x[MemoryKindRawString-33]
	_ = x[MemoryKindAddressLocation-34]
	_ = x[MemoryKindBytes-35]
	_ = x[MemoryKindVariable-36]
	_ = x[MemoryKindTokenIdentifier-37]
	_ = x[MemoryKindTokenComment-38]
	_ = x[MemoryKindTokenNumericLiteral-39]
	_ = x[MemoryKindTokenSyntax-40]
	_ = x[MemoryKindProgram-41]
	_ = x[MemoryKindIdentifier-42]
	_ = x[MemoryKindArgument-43]
	_ = x[MemoryKindBlock-44]
	_ = x[MemoryKindFunctionBlock-45]
	_ = x[MemoryKindParameter-46]
	_ = x[MemoryKindParameterList-47]
	_ = x[MemoryKindTransfer-48]
	_ = x[MemoryKindMembers-49]
	_ = x[MemoryKindTypeAnnotation-50]
	_ = x[MemoryKindFunctionDeclaration-51]
	_ = x[MemoryKindCompositeDeclaration-52]
	_ = x[MemoryKindInterfaceDeclaration-53]
	_ = x[MemoryKindEnumCaseDeclaration-54]
	_ = x[MemoryKindFieldDeclaration-55]
	_ = x[MemoryKindTransactionDeclaration-56]
	_ = x[MemoryKindImportDeclaration-57]
	_ = x[MemoryKindVariableDeclaration-58]
	_ = x[MemoryKindSpecialFunctionDeclaration-59]
	_ = x[MemoryKindPragmaDeclaration-60]
	_ = x[MemoryKindAssignmentStatement-61]
	_ = x[MemoryKindBreakStatement-62]
	_ = x[MemoryKindContinueStatement-63]
	_ = x[MemoryKindEmitStatement-64]
	_ = x[MemoryKindExpressionStatement-65]
	_ = x[MemoryKindForStatement-66]
	_ = x[MemoryKindIfStatement-67]
	_ = x[MemoryKindReturnStatement-68]
	_ = x[MemoryKindSwapStatement-69]
	_ = x[MemoryKindSwitchStatement-70]
	_ = x[MemoryKindWhileStatement-71]
	_ = x[MemoryKindBooleanExpression-72]
	_ = x[MemoryKindNilExpression-73]
	_ = x[MemoryKindStringExpression-74]
	_ = x[MemoryKindIntegerExpression-75]
	_ = x[MemoryKindFixedPointExpression-76]
	_ = x[MemoryKindArrayExpression-77]
	_ = x[MemoryKindDictionaryExpression-78]
	_ = x[MemoryKindIdentifierExpression-79]
	_ = x[MemoryKindInvocationExpression-80]
	_ = x[MemoryKindMemberExpression-81]
	_ = x[MemoryKindIndexExpression-82]
	_ = x[MemoryKindConditionalExpression-83]
	_ = x[MemoryKindUnaryExpression-84]
	_ = x[MemoryKindBinaryExpression-85]
	_ = x[MemoryKindFunctionExpression-86]
	_ = x[MemoryKindCastingExpression-87]
	_ = x[MemoryKindCreateExpression-88]
	_ = x[MemoryKindDestroyExpression-89]
	_ = x[MemoryKindReferenceExpression-90]
	_ = x[MemoryKindForceExpression-91]
	_ = x[MemoryKindPathExpression-92]
	_ = x[MemoryKindConstantSizedType-93]
	_ = x[MemoryKindDictionaryType-94]
	_ = x[MemoryKindFunctionType-95]
	_ = x[MemoryKindInstantiationType-96]
	_ = x[MemoryKindNominalType-97]
	_ = x[MemoryKindOptionalType-98]
	_ = x[MemoryKindReferenceType-99]
	_ = x[MemoryKindRestrictedType-100]
	_ = x[MemoryKindVariableSizedType-101]
	_ = x[MemoryKindLast-102]
}

const _MemoryKind_name = "UnknownBoolAddressStringCharacterMetaTypeNumberArrayDictionaryCompositeOptionalNilVoidTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionHostFunctionBoundFunctionBigIntPrimitiveStaticTypeOptionalStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeCompositeStaticTypeInterfaceStaticTypeReferenceStaticTypeRestrictedStaticTypeCapabilityStaticTypeRawStringAddressLocationBytesVariableTokenIdentifierTokenCommentTokenNumericLiteralTokenSyntaxProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypeLast"

var _MemoryKind_index = [...]uint16{0, 7, 11, 18, 24, 33, 41, 47, 52, 62, 71, 79, 82, 86, 95, 104, 119, 128, 149, 172, 191, 203, 216, 222, 241, 259, 282, 305, 325, 344, 363, 382, 402, 422, 431, 446, 451, 459, 474, 486, 505, 516, 523, 533, 541, 546, 559, 568, 581, 589, 596, 610, 629, 649, 669, 688, 704, 726, 743, 762, 788, 805, 824, 838, 855, 868, 887, 899, 910, 925, 938, 953, 967, 984, 997, 1013, 1030, 1050, 1065, 1085, 1105, 1125, 1141, 1156, 1177, 1192, 1208, 1226, 1243, 1259, 1276, 1295, 1310, 1324, 1341, 1355, 1367, 1384, 1395, 1407, 1420, 1434, 1451, 1455}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
